plugins {
    id 'maven-publish'
    id 'scala'
    id "com.github.johnrengelman.shadow"
}
group = "com.github"




repositories {
    mavenCentral()

    maven { url "https://jitpack.io" }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

version = project.modversion + "+scala." + project.scala_version
// You can also use runClient task located in Tasks/puzzle/runClient
tasks.register("runLoader", JavaExec) {
    group = "loader"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.github.puzzle.loader.launch.Piece"
}

dependencies {
    implementation ("org.scala-lang:scala3-library_3:$scala_version")
    implementation ("org.scala-lang:scala-library:$scala_lib_version")
    shadow("com.github.PuzzleLoader:PuzzleLoader:$puzzle_loader_version")
    shadow("org.spongepowered:mixin:$mixinVersion")
    shadow("org.ow2.asm:asm:$asmVersion")
    shadow("org.ow2.asm:asm-tree:$asmVersion")
    shadow("org.ow2.asm:asm-util:$asmVersion")
    shadow("org.ow2.asm:asm-analysis:$asmVersion")
    shadow("org.ow2.asm:asm-commons:$asmVersion")
}


processResources {
    // Locations of where to inject the properties
    def resourceTargets = [ "puzzle.mod.json" ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : version,
            "mod_desc"       : desc,
            "mod_name"        : modname,
            "mod_id"          : id,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

            artifact source: shadowJar, classifier: '', extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}